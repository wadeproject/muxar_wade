swagger: '2.0'
info:
  version: 1.0.0
  title: MUXar (Musical UX Smart Enhancer)
  description: REST API description
  contact:
    name: Muxar dev team
    email: muxar.wade@gmail.com
    url: 'http://muxar.blogspot.it/'
  license:
    name: MIT
    url: 'http://opensource.org/licenses/MIT'
host: petstore.swagger.io
basePath: /api
schemes:
  - http
consumes:
  - application/json
produces:
  - application/json
paths:
  /artists:
    get:
      description: Returns a lists of artists from the system that the user has access to
      operationId: findArtist
      produces:
        - application/json
        - application/xml
        - text/xml
        - text/html
      parameters:
        - name: tags
          in: query
          description: tags to filter by
          required: false
          type: array
          items:
            type: string
          collectionFormat: csv
        - name: limit
          in: query
          description: maximum number of results to return
          required: false
          type: integer
          format: int32
      responses:
        '200':
          description: artists response
          schema:
            type: array
            items:
              $ref: '#/definitions/artist'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/errorModel'
  '/artists/{id}':
    get:
      description: 'Returns a single artist based on an ID'
      operationId: findArtistById
      produces:
        - application/json
        - application/xml
        - text/xml
        - text/html
      parameters:
        - name: id
          in: path
          description: ID of artist to fetch
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: artist response
          schema:
            $ref: '#/definitions/artist'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/errorModel'
  /songs:
    get:
      description: Returns a lists of songs from the system that the user has access to
      operationId: findSongs
      produces:
        - application/json
        - application/xml
        - text/xml
        - text/html
      parameters:
        - name: tags
          in: query
          description: tags to filter by
          required: false
          type: array
          items:
            type: string
          collectionFormat: csv
        - name: limit
          in: query
          description: maximum number of results to return
          required: false
          type: integer
          format: int32
      responses:
        '200':
          description: songs response
          schema:
            type: array
            items:
              $ref: '#/definitions/song'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/errorModel'
  '/songs/{id}':
    get:
      description: 'Returns a single song based on an ID'
      operationId: findSongById
      produces:
        - application/json
        - application/xml
        - text/xml
        - text/html
      parameters:
        - name: id
          in: path
          description: ID of song to fetch
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: song response
          schema:
            $ref: '#/definitions/song'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/errorModel' 
  /playlists:
    get:
      description: Returns a lists of playlists from the system that the user has access to
      operationId: findPlaylists
      produces:
        - application/json
        - application/xml
        - text/xml
        - text/html
      parameters:
        - name: tags
          in: query
          description: tags to filter by
          required: false
          type: array
          items:
            type: string
          collectionFormat: csv
        - name: limit
          in: query
          description: maximum number of results to return
          required: false
          type: integer
          format: int32
      responses:
        '200':
          description: playlists response
          schema:
            type: array
            items:
              $ref: '#/definitions/playlist'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/errorModel'
    post:
      tags:
        - playlist
      summary: Create playlist
      description: This can only be done by the logged in user.
      operationId: createPlaylist
      produces:
        - application/json
        - application/xml
      parameters:
        - in: body
          name: body
          description: Created playlist object
          required: false
          schema:
            $ref: '#/definitions/playlist'
      responses:
        default:
          description: successful operation
  /playlists/deleteSong:
    put:
      tags:
        - playlist
      summary: Update an existing playlist by deleting a song
      description: ''
      operationId: deleteSong
      consumes:
        - application/json
        - application/xml
      produces:
        - application/json
        - application/xml
      parameters:
        - in: id
          name: playlistId
          description: Playlist object that needs to be added to the store
          required: true
        - in: id
          name: songId
          description: Playlist object that needs to be added to the store
          required: true
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: Playlist not found
        '405':
          description: Validation exception
  /playlists/addSong:
    put:
      tags:
        - playlist
      summary: Update an existing playlist by adding a song
      description: ''
      operationId: addSong
      consumes:
        - application/json
        - application/xml
      produces:
        - application/json
        - application/xml
      parameters:
        - in: id
          name: playlistId
          description: Playlist object that needs to be added to the store
          required: true
        - in: song
          name: song
          description: Playlist object that needs to be added to the store
          required: true
          schema:
            $ref: '#/definitions/song'
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: Playlist not found
        '405':
          description: Validation exception
  '/playlists/{id}':
    get:
      description: 'Returns a single playlist based on an ID'
      operationId: findlaylistById
      produces:
        - application/json
        - application/xml
        - text/xml
        - text/html
      parameters:
        - name: id
          in: path
          description: ID of playlist to fetch
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: playlist response
          schema:
            $ref: '#/definitions/playlist'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/errorModel' 
    delete:
      tags:
        - playlist
      summary: Deletes a playlist
      description: ''
      operationId: deletePlaylist
      produces:
        - application/json
        - application/xml
      parameters:
        - in: header
          name: api_key
          description: ''
          required: true
          type: string
        - in: path
          name: id
          description: Playlist id to delete
          required: true
          type: integer
          format: int64
      responses:
        '400':
          description: Invalid playlist value
  /history:
    get:
      description: Returns a list of songs that were listened to from the system that the user has access to
      operationId: findHistory
      produces:
        - application/json
        - application/xml
        - text/xml
        - text/html
      parameters:
        - name: tags
          in: query
          description: tags to filter by
          required: false
          type: array
          items:
            type: string
          collectionFormat: csv
        - name: limit
          in: query
          description: maximum number of results to return
          required: false
          type: integer
          format: int32
      responses:
        '200':
          description: songs response
          schema:
            type: array
            items:
              $ref: '#/definitions/song'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/errorModel'
definitions:
  artist:
    type: object
    required:
      - id
      - name
      - age
      - placeOfBirth
    properties:
      id:
        type: string
      name:
        type: string
      age:
        type: integer
      placeOfBirth:
        type: string
  album:
    type: object
    required:
      - id
      - title
      - artist
      - songs
    properties:
      id:
        type: string
      title:
        type: string
      artist:
        $ref: '#/definitions/artist'
      songs:
        type: song
  song:
    type: object
    required:
      - id
      - name
      - artist
      - duration
      - genre
      - album
      - composer
    properties:
      name:
        type: string
      artist:
        $ref: '#/definitions/artist'
      duration:
        type: integer
      genre:
        type: string
      album:
        $ref: '#/definitions/album'
      composer:
        type: string
        
  playlist:
    type: object
    required:
      - id
      - song
    properties:
      id:
        type: integer
      song:
        $ref: '#/definitions/song'
  history:
    type: object
    required:
      - id
      - song
    properties:
      id:
        type: integer
      song:
        $ref: '#/definitions/song'
  errorModel:
    type: object
    required:
      - code
      - message
    properties:
      code:
        type: integer
        format: int32
      message:
        type: string